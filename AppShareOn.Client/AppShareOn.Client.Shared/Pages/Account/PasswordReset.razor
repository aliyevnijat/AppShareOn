@page "/account/reset-password/{token}"
@using System.Web
@using System.Text
@using AppShareOn.Application.Models
@using AppShareOn.Application.Models.Account
@layout AccountLayout
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="col-lg-6 custom-green-gradient d-flex justify-content-center align-items-center rounded-start">
    <div class="text-center py-5">
        <h3>Resetting your password?</h3>
        <p>Please make sure your new password is strong and unique for security.</p>
        <div class="alert alert-warning text-left">
            <strong>Holy guacamole!</strong> If you didn't request a password reset, please contact support immediately.
        </div>
    </div>
</div>

<div class="col-lg-6 d-flex justify-content-center align-items-center rounded-end">
    <div class="w-75 py-5">
        <h3 class="text-center">Recover Account</h3>
        <div class="text-center">
            <i class="bi bi-person-fill-lock h1"></i>
        </div>
        <br />

        <p>Please enter your email address, new password, and confirm the new password to update your account.</p>

        @if (!string.IsNullOrEmpty(result))
        {
            <div class="alert @alertClass">
                @result
            </div>
        }

        <!-- Manual Login Form -->
        <div>
            <EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPasswordAsync">
                <DataAnnotationsValidator />

                <!-- Email with Icon -->
                <ValidationMessage class="text-danger" For="@(() => resetPasswordModel.Email)" />
                <div class="mb-3 input-group">
                    <span class="input-group-text"><i class="bi bi-envelope"></i></span> <!-- Icon -->
                    <InputText id="email" class="form-control" @bind-Value="resetPasswordModel.Email"
                        placeholder="Email Address" />
                </div>

                <!-- Password with Toggle Visibility and Icon -->
                <ValidationMessage class="text-danger" For="@(() => resetPasswordModel.Password)" />
                <div class="mb-3 input-group">
                    <span class="input-group-text"><i class="bi bi-lock-fill"></i></span> <!-- Icon -->
                    <InputText id="password" type="@passwordType" class="form-control"
                        @bind-Value="resetPasswordModel.Password" placeholder="Password" />
                    <button type="button" class="input-group-text" @onclick="TogglePasswordVisibility">
                        <i class="bi @eyeIconClass"></i>
                    </button>
                </div>

                <!-- Confirm Password with Toggle Visibility and Icon -->
                <ValidationMessage class="text-danger" For="@(() => resetPasswordModel.ConfirmPassword)" />
                <div class="mb-3 input-group">
                    <span class="input-group-text"><i class="bi bi-lock-fill"></i></span> <!-- Icon -->
                    <InputText id="confirmPassword" type="@passwordType" class="form-control"
                        @bind-Value="resetPasswordModel.ConfirmPassword" placeholder="Confirm Password" />
                    <button type="button" class="input-group-text" @onclick="TogglePasswordVisibility">
                        <i class="bi @eyeIconClass"></i>
                    </button>
                </div>

                <button type="submit" class="btn btn-success w-100">Reset Password</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; } = string.Empty;

    // Model for account recovery
    private PasswordResetModel resetPasswordModel = new PasswordResetModel();

    // Controls password visibility.
    private bool isPasswordVisible = false;

    // Password type for visibility toggle.
    private string passwordType => isPasswordVisible ? "Text" : "Password";

    // Password visibility icon.
    private string eyeIconClass => isPasswordVisible ? "bi-eye" : "bi-eye-slash";

    // API result properties.
    private string result = string.Empty;
    private string alertClass = string.Empty;

    // Handle form submission
    private async Task HandleResetPasswordAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<PasswordResetModel>($"/api/auth/reset-password?token={HttpUtility.UrlEncode(Token)}", resetPasswordModel);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadFromJsonAsync<ApiResponse<object>>();

                if (errorContent != null && errorContent.Errors.Count() > 0)
                {
                    result = errorContent.Errors.FirstOrDefault() ?? string.Empty;
                    alertClass = "alert-danger";
                }
            }
            else
            {
                Navigation.NavigateTo($"/account/password-reset-complete", true);
            }
        }
        catch (HttpRequestException e)
        {
            alertClass = "alert-danger";
            result = $"An unexpected error occured: {e.Message}";
        }
    }

    // Handle password visibility toggle.
    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }
}