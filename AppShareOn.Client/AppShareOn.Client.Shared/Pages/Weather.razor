@page "/app/weather"
@using AppShareOn.Client.Shared.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ICustomAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (RendererInfo.IsInteractive)
{
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <h1>Content for Authorized users.</h1>
            </Authorized>
            <NotAuthorized>
                <h1>Content for unauthorized users.</h1>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
}

@if (forecasts == null && string.IsNullOrEmpty(error))
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">
    @error
</div>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string error = "";
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // On Client render.
        if (RendererInfo.IsInteractive)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            isAuthenticated = authState.User?.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                var response = await Http.GetAsync("/weatherforecast");

                if (response.IsSuccessStatusCode)
                {
                    forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
                }
                else
                {
                    error = $"Status code: {response.StatusCode}";
                }
            }
            else
            {
                error = $"You are not authorized to perform this action.";
            }
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
